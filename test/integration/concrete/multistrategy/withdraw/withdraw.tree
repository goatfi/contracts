withdraw.t.sol
├── when the contract is paused
│   └── it should revert with EnforcedPause error
└── when the contract is not paused
    ├── when the caller doesn't have enough shares to cover the withdraw
    │   └── it should revert with an ERC4626ExceededMaxWithdraw error
    └── when the caller has enough shares to cover the withdraw
        ├── when `amount` is zero
        │   └── it should revert with a Zero Amount error
        └── when `amount` is greater than zero
            ├── when a strategy withdraw has a greater slippage than the slippage limit
            │   └── it should revert with a SlippageCheckFailed error
            └── when a strategy withdraw has less slippage than the slippge limit
                ├── when the balance of the multistrategy is lower than the amount to be withdrawn
                │   ├── when the checked strategy is the zero address
                │   │   ├── when the balance to withdraw is greater than the balance after withdrawing from all strategies
                │   │   │   └── it should revert with InsufficientLiquidity error
                │   │   └── when the balance to withdraw is lower or equal than the balance after withdrawing from all strategies
                │   │       ├── it should burn `amount` of shares
                │   │       ├── it should transfer the base asset to the caller
                │   │       ├── it should emit a Withdraw event
                │   │       └── it should return the burned shares
                │   └── when the checked strategy is not a zero address
                │       ├── when the balance to withdraw is lower or equal than the balance of the Multistrategy
                │       │       ├── it should burn `amount` of shares
                │       │       ├── it should transfer the base asset to the caller
                │       │       ├── it should emit a Withdraw event
                │       │       └── it should return the burned shares
                │       └── when the balance to withdraw is greater than the balance of the Multistrategy
                │           ├── it should withdraw from the strategy up to the amount needed
                │           ├── it should reduce the debt of the strategy by the amount withdrawn
                │           └── it should reduce the debt of the multistrategy by the amount withdrawn
                └── when the balance of the multistrategy is higher than the amount to be withdrawn
                    ├── it should burn `amount` of shares
                    ├── it should transfer the base asset to the receiver
                    ├── it should emit a Withdraw event
                    └── it should return the burned shares